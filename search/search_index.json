{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"example_wolt_package_debug_ci_issues Documentation : https://rtaycher.github.io/example_wolt_package_debug_ci_issues Source Code : https://github.com/rtaycher/example_wolt_package_debug_ci_issues PyPI : https://pypi.org/project/example_wolt_package_debug_ci_issues/ what it says on the tin, not a real package Installation pip install example_wolt_package_debug_ci_issues Development Clone this repository Requirements: Poetry Python 3.7+ Create a virtual environment and install the dependencies poetry install Activate the virtual environment poetry shell Testing pytest Documentation The documentation is automatically generated from the content of the docs directory and from the docstrings of the public signatures of the source code. The documentation is updated and published as a Github project page automatically as part each release. Releasing Trigger the Draft release workflow (press Run workflow ). This will update the changelog & version and create a GitHub release which is in Draft state. Find the draft release from the GitHub releases and publish it. When a release is published, it'll trigger release workflow which creates PyPI release and deploys updated documentation. Pre-commit Pre-commit hooks run all the auto-formatters (e.g. black , isort ), linters (e.g. mypy , flake8 ), and other quality checks to make sure the changeset is in good shape before a commit/push happens. You can install the hooks with (runs for each commit): pre-commit install Or if you want them to run only for each push: pre-commit install -t pre-push Or if you want e.g. want to run all checks manually for all files: pre-commit run --all-files This project was generated using the wolt-python-package-cookiecutter template.","title":"Introduction"},{"location":"#example_wolt_package_debug_ci_issues","text":"Documentation : https://rtaycher.github.io/example_wolt_package_debug_ci_issues Source Code : https://github.com/rtaycher/example_wolt_package_debug_ci_issues PyPI : https://pypi.org/project/example_wolt_package_debug_ci_issues/ what it says on the tin, not a real package","title":"example_wolt_package_debug_ci_issues"},{"location":"#installation","text":"pip install example_wolt_package_debug_ci_issues","title":"Installation"},{"location":"#development","text":"Clone this repository Requirements: Poetry Python 3.7+ Create a virtual environment and install the dependencies poetry install Activate the virtual environment poetry shell","title":"Development"},{"location":"#testing","text":"pytest","title":"Testing"},{"location":"#documentation","text":"The documentation is automatically generated from the content of the docs directory and from the docstrings of the public signatures of the source code. The documentation is updated and published as a Github project page automatically as part each release.","title":"Documentation"},{"location":"#releasing","text":"Trigger the Draft release workflow (press Run workflow ). This will update the changelog & version and create a GitHub release which is in Draft state. Find the draft release from the GitHub releases and publish it. When a release is published, it'll trigger release workflow which creates PyPI release and deploys updated documentation.","title":"Releasing"},{"location":"#pre-commit","text":"Pre-commit hooks run all the auto-formatters (e.g. black , isort ), linters (e.g. mypy , flake8 ), and other quality checks to make sure the changeset is in good shape before a commit/push happens. You can install the hooks with (runs for each commit): pre-commit install Or if you want them to run only for each push: pre-commit install -t pre-push Or if you want e.g. want to run all checks manually for all files: pre-commit run --all-files This project was generated using the wolt-python-package-cookiecutter template.","title":"Pre-commit"},{"location":"api_docs/","text":"API documentation example empty () documentation Source code in example_wolt_package_debug_ci_issues/__init__.py 4 5 6 def empty (): \"\"\" documentation\"\"\" return object ()","title":"API documentation"},{"location":"api_docs/#api-documentation","text":"example","title":"API documentation"},{"location":"api_docs/#example_wolt_package_debug_ci_issues.empty","text":"documentation Source code in example_wolt_package_debug_ci_issues/__init__.py 4 5 6 def empty (): \"\"\" documentation\"\"\" return object ()","title":"empty()"},{"location":"changelog/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . Unreleased 0.0.7 - 2022-11-29 Changed Nothing 0.0.5 - 2022-11-29 Changed Nothing 0.0.2 - 2022-11-28 Changed Fake function","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#unreleased","text":"","title":"Unreleased"},{"location":"changelog/#007-2022-11-29","text":"","title":"0.0.7 - 2022-11-29"},{"location":"changelog/#changed","text":"Nothing","title":"Changed"},{"location":"changelog/#005-2022-11-29","text":"","title":"0.0.5 - 2022-11-29"},{"location":"changelog/#changed_1","text":"Nothing","title":"Changed"},{"location":"changelog/#002-2022-11-28","text":"","title":"0.0.2 - 2022-11-28"},{"location":"changelog/#changed_2","text":"Fake function","title":"Changed"}]}